(function(define) { 'use strict';
	define(function(require, exports, module) {
		var util = require("util");
		var EventEmitter = require('events').EventEmitter;
		var types = {
			"image/jpeg": "files"
		}
		var Form = function() {
			this.data = "";
/*			this.start = "";
			this.disposition = "";
			this.type = "";
			this.content = "";
			this.end = "";*/
			this.file = {content:""};
			this.files = [];
			this.fields = [];
		};
		util.inherits(Form, EventEmitter);
		(function() {
			
			this.write = function(buffer) {
				var _self = this;
				//this.data += buffer;
				var b = new Buffer(buffer,["ascii"]);
				//b.write(buffer);
				var splits = b.toString().split("\r\n");
				for(var i = 0, len = splits.length; i< len; i++) {
					_self.handle(splits[i]);
				}
				//console.log("buffer: ", b.toString());
			}
			this.handle = function(data) {
				if (this.file.end && data.indexOf(this.file.end) != -1 ) {
					this[types[this.file.type]].push(this.file)  ;	
					this.file = {content:""};				
				}else if( data.indexOf("------WebKitFormBoundary") != -1 ) {
					this.file.start = data;
					this.file.end = data+"--";
				}else if(data.indexOf("Content-Disposition:") != -1) {
					var dsplits = data.split("; ");
					this.file["Content-Disposition"] =dsplits[0].match(/Content-Disposition:([\w\W]+)/)[1];
					this.file.name = dsplits[1].match(/name=\"([\w\W]+)\"/)[1];
					this.file.filename = dsplits[2].match(/filename=\"([\w\W]+)\"/)[1];
				}else if(data.indexOf("Content-Type:") != -1){
					this.file.type = data.match(/Content-Type: ([\w\W]+)/)[1];
				}else if(data == "") {

				}else{
					this.file.content += data;
					/*var LF = 10,
				    CR = 13,
				    SPACE = 32,
				    HYPHEN = 45,
				    COLON = 58,
				    A = 97,
				    Z = 122,

				    lower = function(c) {
				      return c | 0x20;
				    };
					
					var buffer = new Buffer(data);
					for (var i = 0; i < len; i++) {
						buffer[i].
					}*/
					
				}
			}
		}).call(Form.prototype);
		exports.Form = Form;
	});
})(typeof define === 'function'  ? define : function (factory) { factory(require, exports, module); } );