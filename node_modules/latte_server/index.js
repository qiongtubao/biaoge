(function(define) { 'use strict';
	define(function(require, exports, module) {
/*		var route = require("./bin/route");
		var server = require("./bin/server");
		var handle = require("./bin/handle");*/
		var url = require("url");
		var path = require("path");
		var http = require("http");
		var fs = require("fs");
		var querystring = require("querystring");
		(function() {
			this.config ={};
			this.lattePath = {};
			this.latte = function(opts) {
				opts = opts || {};
				var _self = this;
				_self.lattePath.Path = path.relative(__dirname, process.cwd())+"/";
				_self.config = require(_self.lattePath.Path+ (opts.config || "./config/latte.json") );
				_self.mines = require("./config/mines");
				_self.gets = opts.gets || {};
				_self.posts = opts.posts || {};			
				fs.readdirSync(__dirname+"/handle").forEach(function(file) {
					var handle = require("./handle/"+file);
					var fileName = path.basename(file, ".js");
					_self.gets["/latte/"+fileName] = handle.get;
					_self.posts["/latte/"+fileName] = handle.post;
				});
				try{
					http.createServer(_self.onRequest()).listen(_self.config.httpServer.port);
				}catch(e) {
					console.log("event:",e);
				}
				
			};
			this.set = function(type, path, handle) {
				var _self = this;
				_self[type+"s"][path] = handle;
			}
			this.get = function(path, handle) {
				var _self = this;
				_self.gets[path] = handle;
			}
			this.set = function(path, handle) {
				var _self = this;
				_self.sets[path] = handle;
			}
			this.onRequest = function() {
				var _self = this;
				return function(req, res) {
					req.url = url.parse(req.url);
					var pathname = req.url.pathname;
					if(_self.gets[pathname]) {
						req.get = _self.getGetData(req);
						_self.gets[pathname](req, res);
					}else if(req.method.toLowerCase() == 'post') {
						_self.getPostData(req, function(data) {
							req.post = data;
							_self.posts[pathname](req, res);
						});
					}else{
						_self.staticFile(pathname, req, res);
					}
				};
			}
			this.staticFile = function(p, req, res) {
				var _self = this;
				var paths = p.split("/");
				var virtualDirectory = _self.config.httpServer.virtualDirectorys[paths[1]];
				var mpath = "";
				if(virtualDirectory) {
					var ps = paths.splice(2);
					mpath = path.normalize (virtualDirectory.path + "/" + ps.join("/") );
				}else{
					mpath = path.normalize(_self.config.httpServer.path + p);
				}
				try{
					var result = _self.getFileContent(mpath, res);
					res.writeHead(200, result.head);
					res.end(result.data);
				}catch(e) {
					console.log(e);
					res.writeHead(404, "Not Found");
					res.end();
				}
				
			}
			this.getFileContent = function(p) {
				var result = {};
				var l = p.slice(-1);
				var _self = this;
				if(l === "/" || l === "\\") {
					var indexs = _self.config.httpServer.indexs;
					for(var i = 0, l = indexs.length; i< l; i++ ) {
						try{
							result = _self.readFile(p+indexs[i]);
							break;
						}catch(e){
							console.error(e);
						}
					}
				}else{
					result = _self.readFile(p);
				}	
				if(!result.data) throw "not find " + p;
				return result;
			}
			this.readFile = function(pa) {
				var result = {};
				var type = path.extname(pa);
				result.data = fs.readFileSync(pa);
				result.head = {
					"Content-Type":this.mines[type]
				};
				return result;
			}
			this.getGetData = function(req) {
				var query = querystring.parse(req.url.query);
				return query;
			}
			this.getPostData = function(req, callback) {
				/*var postData = '';

			    // 设置接收数据编码格式为 UTF-8
			    req.setEncoding('utf8');
			    // 接收数据块并将其赋值给 postData
			    var Form =  require("./lib/form").Form;
			    var form  = new Form();
			    req.addListener('data', function(postDataChunk) {
			        //postData += postDataChunk;
			        form.write(postDataChunk);
			    });

			    req.addListener('end', function() {
			        // 数据接收完毕，执行回调函数
			        callback(form);
			    });*/
				var formidable = require('node-formidable'), _self = this;
				var form = new formidable.IncomingForm(),
			        fields = [],files = [];
			    console.log("upload:",_self.config.uploadDir);
		     	form.uploadDir = _self.config.uploadDir || "./upload";
				form
			      .on('error', function(err) {
			        res.writeHead(200, {'content-type': 'text/plain'});
			        res.end('error:\n\n'+util.inspect(err));
			      })
			        .on('field', function(field, value) {
				        //console.log(field, value);
				        fields.push([field, value]);
				      })
				      .on('file', function(field, file) {
				        //console.log(field, file);
				        files.push([field, file]);
				      })
			      .on('end', function() {
			        callback({
			        	fields:	fields,
			        	files: files
			        });
			      });
				form.parse(req);
			}

		}).call(module.exports);
	});
})(typeof define === 'function'  ? define : function (factory) { factory(require, exports, module); } );